interface baseDTO {
  message: String
  showMessage: Boolean
}
type DTO implements baseDTO{
  message: String
  showMessage: Boolean
}
type authDTO implements baseDTO {
  message: String
  showMessage: Boolean
  accessToken: String
}
type message {
  messageid: Int!
  messagetimestamp: String!
  messagedata: String!
  incoming: Boolean!
}
type person {
  id: String!
  latitude: String!
  longitude: String!
}
type profile {
  id: String
  bio: String
  gender: String
  fullName: String
  username: String
  isFriend: Boolean
  isPending: Boolean
}
input profileInput{
  bio: String
  gender: String
  fullName: String
}

type Query {
  hello: String
  bye: String
  signIn(username: String, password: String): authDTO
  whoami(bearer: String): DTO
  getConversation(receiverUserId: String!, limit: Int!, offset: Int!, after: Int): [message]
  discoverPeople: [person]
  isFriend(id: String): Boolean
  getUserId: String
  getAllFriends(limit:Int, offset:Int): [profile]
  getAllFriendRequests(limit:Int, offset:Int): [String]
  getProfile(id: String): profile
}

type Mutation {
  createNewUser(username: String, password: String, fullname: String): DTO
  sendMessage(messagedata: String, receiverUserId: String, messagetimestamp: String): Int
  updateCoordinates(latitude: String, longitude: String, discoverradius: String): DTO
  sendFriendRequest(id: String): DTO
  rejectFriendRequest(id: String): DTO
  acceptFriendRequest(id: String): DTO
  unfriend(id: String): DTO
  setProfile(profile: profileInput): DTO
}
  